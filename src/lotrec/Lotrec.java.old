/*
 * Lotrec.java
 *
 * Created on 21 février 2007, 14:11
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package lotrec;

import cytoscape.CyMain;
import cytoscape.Cytoscape;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.Enumeration;
import lotrec.dataStructure.Logic;
import lotrec.dataStructure.TestingFormula;
import lotrec.dataStructure.expression.MarkedExpression;
import lotrec.dataStructure.graph.Wallet;
import lotrec.dataStructure.tableau.Tableau;
import lotrec.dataStructure.tableau.TableauNode;
import lotrec.dataStructure.tableau.action.DuplicateAction;
import lotrec.engine.Engine;
import lotrec.gui.CyDisplayer;
import lotrec.gui.GraphvizDisplayer;
import lotrec.gui.LocalInterface;
//import lotrec.parser.FileInterpreter;
import lotrec.parser.LogicParserException;
import lotrec.parser.LogicXMLParser;
import lotrec.parser.OldLangToXML;
import lotrec.parser.OldiesTokenizer;
import lotrec.parser.ParseException;
import lotrec.process.AllRules;
import lotrec.process.EventMachine;
import lotrec.process.Keep;
import lotrec.process.Strategy;
import lotrec.process.Worker;

/**
 *
 * @author said
 */

public class Lotrec_1 {
    
    public static String workingPath;
    public static boolean alreadyRun = false;
    public static String runMode;
    public static StringBuffer lotrecWebOut=new StringBuffer("");
    public static PrintStream out;
    public static PrintStream err ;
    /** Creates a new instance of Lotrec */
    public Lotrec_1() {
    }
    
    // !!!! Should be replaced by somthing more clear!!!!
    private static void addToDispatcher(Tableau tableau, Keep keep) {
        for(Enumeration enumr = keep.getWorkers(); enumr.hasMoreElements();) {
            //dispatch to all rules
            Worker w = (Worker)enumr.nextElement();
            if(w instanceof EventMachine) tableau.addProcessListener((EventMachine)w);
            else addToDispatcher(tableau, (Keep)w);
        }
    }
    
    public static Wallet buildTableauxFor(Logic givenLogic, String givenFormula, String chosenStrategyName){
        MarkedExpression formula = Lotrec.parseFormula(givenLogic, givenFormula);
        Strategy chosenStrategy = givenLogic.getStrategy(chosenStrategyName);
        Wallet resultsWallet =  new Wallet(); 
        Tableau tableau = new Tableau("tableau0");        
        addToDispatcher(tableau, chosenStrategy);
        tableau.setStrategy(chosenStrategy); 
        resultsWallet.add(tableau);
        TableauNode rootNode = new TableauNode("root");
        tableau.add(rootNode);
        rootNode.add(formula);
        DuplicateAction.setStepCount(givenLogic.getMaxStepsNum());
        Engine.buildTableaux(resultsWallet, chosenStrategy);
        return resultsWallet;
    }
    
    public static Wallet buildTableauxFor(Logic givenLogic, MarkedExpression givenFormula, String chosenStrategyName){               
        Strategy chosenStrategy = givenLogic.getStrategy(chosenStrategyName);
        Wallet resultsWallet =  new Wallet(); 
        Tableau tableau = new Tableau("tableau0");        
        addToDispatcher(tableau, chosenStrategy);
        tableau.setStrategy(chosenStrategy); 
        resultsWallet.add(tableau);
        TableauNode rootNode = new TableauNode("root");
        tableau.add(rootNode);
        rootNode.add(givenFormula);
        DuplicateAction.setStepCount(givenLogic.getMaxStepsNum());
        Engine.buildTableaux(resultsWallet, chosenStrategy);
        return resultsWallet;
    }
    
    public static MarkedExpression parseFormula(Logic givenLogic, String formulaCode){
        OldiesTokenizer oldiesTokenizer = new OldiesTokenizer(givenLogic);
        oldiesTokenizer.initializeTokenizerAndProps();
        MarkedExpression formula = null;
        try {
            formula = new MarkedExpression(oldiesTokenizer.parseExpression(formulaCode));
        } catch (LogicParserException ex) {
            Lotrec.println("Execption while reading a formula...");
            Lotrec.println(ex.getMessage());
        }
        return formula;
    }
    
    public static Logic parsePredefinedXMLLogicFile(String logicXMLFileName){
        Logic resultLogic = null;
        String fileName = workingPath + "PredefinedLogics" + System.getProperty("file.separator") + logicXMLFileName;
        LogicXMLParser lxmlparser = new LogicXMLParser(fileName);
        try {
            resultLogic = lxmlparser.parseLogic();
        } catch (LogicParserException ex) {
            Lotrec.println("Execption while reading the logic file " + fileName);
            Lotrec.println(ex.getMessage());
        }
        return resultLogic;
    }
    
    public static Logic parseUserdefinedXMLLogicFile(String logicXMLFileName){
        Logic resultLogic = null;
        String fileName = workingPath + "UserdefinedLogics" + System.getProperty("file.separator") + logicXMLFileName;
        LogicXMLParser lxmlparser = new LogicXMLParser(fileName);
        try {
            resultLogic = lxmlparser.parseLogic();
        } catch (LogicParserException ex) {
            Lotrec.println("Execption while reading the logic file " + fileName);
            Lotrec.println(ex.getMessage());
        }
        return resultLogic;
    }
    
    public static void displayTableaux(Wallet resultsWallet, MarkedExpression givenFormula){
        LocalInterface.createCytoscapeFrame(resultsWallet, givenFormula);
        CyDisplayer.displayTableauInCy(resultsWallet, givenFormula);
    }
    //To be used after buildTableauxFor (dealing with the parser and the new version..)
    public static String[] createTableauxImages(Wallet resultsWallet, MarkedExpression givenFormula){
        String[] result;
        result = GraphvizDisplayer.createTableauImages(resultsWallet, givenFormula);
        for(int i=0; i<result.length; i++){
            System.out.println("Tableau image with name: " + result[i] + " has been created.");
        }
        /*if(runMode.equals("WEB")){
            Lotrec.out.close();
            Lotrec.err.close();
        }
         */
        return result;
    }
    
    /*public static void buildAndDisplayTableaux(String givenLogic, String givenFormula){
        Wallet walletResult = null;
        MarkedExpression formula = null;
        FileInterpreter fi = new FileInterpreter();
        try{
            walletResult  = fi.run(givenLogic,givenFormula);
            formula = fi.parseFormula(givenFormula);
        }catch(Exception e){
            System.out.println(e.getMessage());
        }finally{
            if(runMode.equals("GUI"));
                //LocalInterface.getCurrentInternalFrame().setOutput(fi.getPaserOutput());
            else if(runMode.equals("WEB"))
                System.out.println(fi.getPaserOutput());
        }
        LocalInterface.createCytoscapeFrame(walletResult, formula);
        CyDisplayer.displayTableauInCy(walletResult,formula);
    }
     
    //for old fashion parser... (we use here FileInterpreter)
    public static String[] buildAndCreateImagesTableaux(String givenLogic, String givenFormula){
        Wallet walletResult = null;
        MarkedExpression formula = null;
        FileInterpreter fi = new FileInterpreter();
        String[] result = null;
        try{
            walletResult  = fi.run(givenLogic,givenFormula);
            formula = fi.parseFormula(givenFormula);
            //Optionnel si l'on voudra l'appeler avec GUI
            //LocalInterface.createCytoscapeFrame(wallet, formula);
            
            //result = CyDisplayer.createTableauImagesInCy(walletResult,formula);
            result = GraphvizDisplayer.createTableauImages(walletResult, formula);
            for(int i=0; i<result.length; i++){
                System.out.println("Tableau image with name: " + result[i] + " has been created.");
            }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }finally{
            if(runMode.equals("GUI"));
                //LocalInterface.getCurrentInternalFrame().setOutput(fi.getPaserOutput());
            else if(runMode.equals("WEB")){
                Lotrec.out.close();
                Lotrec.err.close();
            }
            //System.out.println(fi.getPaserOutput());
        }
        return result;
    }
     */
    
    public void putWalletInFile(Wallet wallet){
        
    }
    
    public static void deleteCoreFile(){
        String coreFile=Lotrec.getWorkingPath()+"Lotrec.core";
        File file=new File(coreFile);
        file.delete();
    }
    
    
    //delete all tableaux images files created by Web Lotrec
    public static void deleteTableauxImages(){
        File imagesDir = new File(Lotrec.getWorkingPath() + "tableauxImages");
        if(imagesDir.isDirectory()){
            String[] fileList = imagesDir.list();
            for(int i=0; i<fileList.length; i++){
                File file = new File(imagesDir,fileList[i]);
                file.delete();
            }
        }
    }
    
    
    public static void exitLotrec(){
        deleteCoreFile();
        Cytoscape.exit();
        System.exit(1);
    }
    
    public static void runGUILotrec()throws Exception{
        if(! alreadyRun){
            runMode = "GUI";
            workingPath = System.getProperty("user.dir") + System.getProperty("file.separator");
            String [] cyArgs  = new String[1];
            cyArgs[0] = "-p plugins";
            new CyMain(cyArgs);
            javax.swing.SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    LocalInterface.createAndShowGUI();
                }
            });            
            alreadyRun = true;
        } 
        Lotrec.test();
    }
    
    public static void test(){
        //runMode = "GUI";
        //workingPath = System.getProperty("user.dir") + System.getProperty("file.separator");
        PLLoader.loadPLs();
        /*String logicName = "LJminimal";
        OldLangToXML xmlTranslator = new OldLangToXML();
        try {
            xmlTranslator.translate(logicName);
        } catch (ParseException ex) {
            ex.printStackTrace();
            Lotrec.println(ex.getMessage());
        }
         */
        String file = "K45Optimal.xml";
        Engine.engineStrategy = new Strategy(new AllRules());
        Logic logic = Lotrec.parsePredefinedXMLLogicFile(file);
        MarkedExpression formula = ((TestingFormula)logic.getTestingFormulae().get(0)).getFormula();
        //MarkedExpression formula = Lotrec.parseFormula(logic,"not and not Bill not Mour");
        Wallet wallet = Lotrec.buildTableauxFor(logic,formula,logic.getDefaultStrategyName());
        //Wallet wallet = Lotrec.buildTableauxFor(logic,"and not Bill not Mour",logic.getDefaultStrategyName());
        Lotrec.displayTableaux(wallet,formula);   
         
    }
    
    public static void runWebLotrec(String webAppPath)throws Exception{
        if(! alreadyRun){
            runMode = "WEB";
            workingPath = webAppPath;
            Lotrec.out = new PrintStream(
                    new BufferedOutputStream(
                    new FileOutputStream(workingPath + "out.txt")));
            Lotrec.err = new PrintStream(
                    new BufferedOutputStream(
                    new FileOutputStream(workingPath + "err.txt")));
            System.setOut(out);
            System.setErr(err);
            /*String [] cyArgs  = new String[1];
            cyArgs[0] = "-p plugins";
            try{
                new CyMain(cyArgs);
            }catch(Exception e){
                System.out.println("Error: " + e);
                System.out.println("Error msg: " + e.getMessage());
                System.out.println("Error stack trace: " + e.getStackTrace());
                e.printStackTrace();
                //close the outputs files if there's an error!!
                out.close();
                err.close();
            }
             */
            alreadyRun = true;
        }
    }   
    
    public static void print(Object o){
        //if(Lotrec.runMode.equals("TXT")||Lotrec.runMode.equals("GUI")){
            System.out.print(o);
        //}
    }
    
    public static void println(Object o){
        //if(Lotrec.runMode.equals("TXT")||Lotrec.runMode.equals("GUI")){
            System.out.println(o);
        //}
    }
    
    public static void main(String [] args) {
        try{
            runGUILotrec();
        }catch(Exception e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
    
    public static void setWorkingPath(String workPath){
        workingPath = workPath;
    }
    
    public static String getWorkingPath(){
        return workingPath;
    }
}
