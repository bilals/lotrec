<?xml version="1.0" encoding="UTF-8"?>
<logic>
    <parser-version>2.1</parser-version>
    <description>intuitionistic logic LJ (without ~)
Author: Lilac Team
Last update: June 2007</description>
    <connector>
        <connector-name>and</connector-name>
        <arity>2</arity>
        <associative>true</associative>
        <output-format>_ &amp; _</output-format>
        <priority>4</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>or</connector-name>
        <arity>2</arity>
        <associative>true</associative>
        <output-format>_ V _</output-format>
        <priority>3</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>imp</connector-name>
        <arity>2</arity>
        <associative>false</associative>
        <output-format>_ -&gt; _</output-format>
        <priority>2</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>t</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>T_</output-format>
        <priority>1</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>f</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>F_</output-format>
        <priority>1</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>a</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>a_</output-format>
        <priority>5</priority>
        <connector-comment/>
    </connector>
    <rule>
        <rule-name>StopIfClash</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>t variable A</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>f variable A</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>CLOSED</parameter>
        </action>
        <action>
            <action-name>stop</action-name>
            <parameter>node0</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>StopIfFalse</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>t False</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>CLOSED</parameter>
        </action>
        <action>
            <action-name>stop</action-name>
            <parameter>node0</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>TAnd</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>t and variable A variable B</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>t variable A</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>t variable B</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>FAnd</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>f and variable A variable B</parameter>
        </condition>
        <action>
            <action-name>duplicate</action-name>
            <parameter>premodel_copy</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>f variable A</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>premodel_copy.node0</parameter>
            <parameter>f variable B</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>TOr</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>t or variable A variable B</parameter>
        </condition>
        <action>
            <action-name>duplicate</action-name>
            <parameter>premodel_copy</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>t variable A</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>premodel_copy.node0</parameter>
            <parameter>t variable B</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>FOr</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>f or variable A variable B</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>f variable A</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>f variable B</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>createSuccessor</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>f imp variable A variable B</parameter>
        </condition>
        <condition>
            <condition-name>isNotMarked</condition-name>
            <parameter>node0</parameter>
            <parameter>CONTAINED</parameter>
        </condition>
        <action>
            <action-name>createNewNode</action-name>
            <parameter>node1</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>t variable A</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>f variable B</parameter>
        </action>
        <rule-comment>rule for transitivity</rule-comment>
    </rule>
    <rule>
        <rule-name>copyImp</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>t imp variable A variable B</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>t imp variable A variable B</parameter>
        </action>
        <rule-comment>rule for transitivity</rule-comment>
    </rule>
    <rule>
        <rule-name>propagateImp2ActualWorld</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>t imp variable A variable B</parameter>
        </condition>
        <action>
            <action-name>duplicate</action-name>
            <parameter>premodel_copy</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>f variable A</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>premodel_copy.node0</parameter>
            <parameter>t variable B</parameter>
        </action>
        <rule-comment>rule for reflexivity</rule-comment>
    </rule>
    <rule>
        <rule-name>propagateAtoms</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>t a P</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>t a P</parameter>
        </action>
        <rule-comment>rule for inheritance of atoms</rule-comment>
    </rule>
    <rule>
        <rule-name>loopTest</rule-name>
        <condition>
            <condition-name>isNewNode</condition-name>
            <parameter>node1</parameter>
        </condition>
        <condition>
            <condition-name>isAncestor</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
        </condition>
        <condition>
            <condition-name>contains</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
        </condition>
        <action>
            <action-name>mark</action-name>
            <parameter>node1</parameter>
            <parameter>CONTAINED</parameter>
        </action>
        <rule-comment>inclusion test</rule-comment>
    </rule>
    <strategy>
        <strategy-name>LJStrategy</strategy-name>
        <strategy-code>repeat
  firstRule
	StopIfClash
	StopIfFalse
	TAnd
	FOr
	FAnd
	TOr
	propagateImp2ActualWorld
	propagateAtoms
	copyImp
	loopTest
	createSuccessor
  end
end</strategy-code>
        <strategy-comment/>
    </strategy>
    <main-strategy>LJStrategy</main-strategy>
    <testing-formula>
        <formula-name/>
        <formula-code>f imp a P imp imp a P False False</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name/>
        <formula-code>f or a P imp a P False</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name/>
        <formula-code>f imp imp imp a P False False a P</formula-code>
        <formula-comment/>
    </testing-formula>
</logic>
