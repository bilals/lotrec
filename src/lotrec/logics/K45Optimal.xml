<?xml version="1.0" encoding="UTF-8"?>
<logic>
    <parser-version>2.1</parser-version>
    <description>K45 with ~, &amp;, v, -&gt;, [], &lt;&gt;. OPTIMISED VERSION -- ONE DEPTH GRAPH. Requires conjoining a special constant "Root" to the formula, example: and Root (not nec nec P)
Author: Lilac Team
Last update: June 2007</description>
    <connector>
        <connector-name>not</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>~_</output-format>
        <priority>5</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>and</connector-name>
        <arity>2</arity>
        <associative>true</associative>
        <output-format>_ &amp; _</output-format>
        <priority>4</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>or</connector-name>
        <arity>2</arity>
        <associative>true</associative>
        <output-format>_ V _</output-format>
        <priority>3</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>imp</connector-name>
        <arity>2</arity>
        <associative>true</associative>
        <output-format>_ -&gt; _</output-format>
        <priority>2</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>nec</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>[]_</output-format>
        <priority>5</priority>
        <connector-comment/>
    </connector>
    <connector>
        <connector-name>pos</connector-name>
        <arity>1</arity>
        <associative>false</associative>
        <output-format>&lt;&gt;_</output-format>
        <priority>5</priority>
        <connector-comment/>
    </connector>
    <rule>
        <rule-name>Stop</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not variable a</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>FALSE</parameter>
        </action>
        <action>
            <action-name>stop</action-name>
            <parameter>node0</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>NotNot</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not not variable a</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>And</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>and variable a variable b</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>NotOr</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not or variable a variable b</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>not variable a</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>not variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>NotImp</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not imp variable a variable b</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>not variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>CutOrLeft</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>or variable a variable b</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not variable a</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>CutOrRight</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>or variable a variable b</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not variable b</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>CutNotAndLeft</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not and variable a variable b</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>not variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>CutNotAndRight</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not and variable a variable b</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>variable b</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>not variable a</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>CutImpLeft</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>imp variable a variable b</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>CutImpRight</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>imp variable a variable b</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not variable b</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>not variable a</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>NotAnd</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not and variable a variable b</parameter>
        </condition>
        <condition>
            <condition-name>hasNotElement</condition-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </condition>
        <condition>
            <condition-name>hasNotElement</condition-name>
            <parameter>node0</parameter>
            <parameter>variable b</parameter>
        </condition>
        <action>
            <action-name>duplicate</action-name>
            <parameter>premodel_copy</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>not variable a</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>premodel_copy.node0</parameter>
            <parameter>not variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>Or</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>or variable a variable b</parameter>
        </condition>
        <condition>
            <condition-name>hasNotElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not variable a</parameter>
        </condition>
        <condition>
            <condition-name>hasNotElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not variable b</parameter>
        </condition>
        <action>
            <action-name>duplicate</action-name>
            <parameter>premodel_copy</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>premodel_copy.node0</parameter>
            <parameter>variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>Imp</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>imp variable a variable b</parameter>
        </condition>
        <condition>
            <condition-name>hasNotElement</condition-name>
            <parameter>node0</parameter>
            <parameter>variable a</parameter>
        </condition>
        <condition>
            <condition-name>hasNotElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not variable b</parameter>
        </condition>
        <action>
            <action-name>duplicate</action-name>
            <parameter>premodel_copy</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>not variable a</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>premodel_copy.node0</parameter>
            <parameter>variable b</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>PosAtRootCreateSuccessor</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>pos variable a</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>Root</parameter>
        </condition>
        <action>
            <action-name>createNewNode</action-name>
            <parameter>node1</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>variable a</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>NotNecAtRootCreateSuccessor</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not nec variable a</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>Root</parameter>
        </condition>
        <action>
            <action-name>createNewNode</action-name>
            <parameter>node1</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>not variable a</parameter>
        </action>
        <rule-comment/>
    </rule>
    <rule>
        <rule-name>PosAtSuccCreateBrother</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node1</parameter>
            <parameter>pos variable a</parameter>
        </condition>
        <condition>
            <condition-name>isNotMarked</condition-name>
            <parameter>node1</parameter>
            <parameter>CONTAINED</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </condition>
        <action>
            <action-name>createNewNode</action-name>
            <parameter>node2</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node0</parameter>
            <parameter>node2</parameter>
            <parameter>R</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node2</parameter>
            <parameter>variable a</parameter>
        </action>
        <rule-comment>"if hasElement  node0 Root": implicitly satisfied condition. "do add node0 (pos  (variable a))": could replace the above listed actions in the case where we don't like to use LoopTest rule.</rule-comment>
    </rule>
    <rule>
        <rule-name>NotNecAtSuccCreateBrother</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node1</parameter>
            <parameter>not nec variable a</parameter>
        </condition>
        <condition>
            <condition-name>isNotMarked</condition-name>
            <parameter>node1</parameter>
            <parameter>CONTAINED</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </condition>
        <action>
            <action-name>createNewNode</action-name>
            <parameter>node2</parameter>
        </action>
        <action>
            <action-name>link</action-name>
            <parameter>node0</parameter>
            <parameter>node2</parameter>
            <parameter>R</parameter>
        </action>
        <action>
            <action-name>add</action-name>
            <parameter>node2</parameter>
            <parameter>not variable a</parameter>
        </action>
        <rule-comment>"if hasElement  node0 Root": implicitly satisfied condition. "do add node0 (not (nec (variable a)))": could replace the above listed actions in the case where we don't like to use LoopTest rule.</rule-comment>
    </rule>
    <rule>
        <rule-name>PropagateNecFromRootToSuccessors</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>nec variable A</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>variable A</parameter>
        </action>
        <rule-comment>"if hasElement node0 Root" implicitly satisfied condition.</rule-comment>
    </rule>
    <rule>
        <rule-name>PropagateNotPosFromRootToSuccessors</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>not pos variable A</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node1</parameter>
            <parameter>not variable A</parameter>
        </action>
        <rule-comment>"if hasElement node0 Root" implicitly satisfied condition.</rule-comment>
    </rule>
    <rule>
        <rule-name>CopyNecToRoot</rule-name>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node1</parameter>
            <parameter>nec variable a</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>nec variable a</parameter>
        </action>
        <rule-comment>"if hasElement node0 Root" implicitly satisfied condition.</rule-comment>
    </rule>
    <rule>
        <rule-name>CopyNotPosToRoot</rule-name>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </condition>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node1</parameter>
            <parameter>not pos variable a</parameter>
        </condition>
        <action>
            <action-name>add</action-name>
            <parameter>node0</parameter>
            <parameter>nec not variable a</parameter>
        </action>
        <rule-comment>"if hasElement node0 Root" implicitly satisfied condition. We could have added (not (pos (variable A)))</rule-comment>
    </rule>
    <rule>
        <rule-name>LoopTest</rule-name>
        <condition>
            <condition-name>hasElement</condition-name>
            <parameter>node0</parameter>
            <parameter>Root</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node1</parameter>
            <parameter>R</parameter>
        </condition>
        <condition>
            <condition-name>isLinked</condition-name>
            <parameter>node0</parameter>
            <parameter>node2</parameter>
            <parameter>R</parameter>
        </condition>
        <condition>
            <condition-name>areNotIdentical</condition-name>
            <parameter>node1</parameter>
            <parameter>node2</parameter>
        </condition>
        <condition>
            <condition-name>contains</condition-name>
            <parameter>node1</parameter>
            <parameter>node2</parameter>
        </condition>
        <action>
            <action-name>mark</action-name>
            <parameter>node2</parameter>
            <parameter>CONTAINED</parameter>
        </action>
        <rule-comment>Tests for brother nodes inclusion could be omitted after chaging the rules: [PosAtSucc|NotNecAtSucc]CreateBrother </rule-comment>
    </rule>
    <strategy>
        <strategy-name>CPLStrategy</strategy-name>
        <strategy-code>repeat
  firstRule
	Stop
	NotNot
	And
	NotOr
	NotImp
	CutOrLeft
	CutOrRight
	CutNotAndLeft
	CutNotAndRight
	CutImpLeft
	CutImpRight
	NotAnd
	Or
	Imp
  end
end</strategy-code>
        <strategy-comment/>
    </strategy>
    <strategy>
        <strategy-name>K45OptimalStrategy</strategy-name>
        <strategy-code>repeat
  firstRule
	CPLStrategy
	allRules
	  PosAtRootCreateSuccessor
	  NotNecAtRootCreateSuccessor
	  PropagateNecFromRootToSuccessors
	  PropagateNotPosFromRootToSuccessors
	  PosAtSuccCreateBrother
	  NotNecAtSuccCreateBrother
	  CopyNecToRoot
	  CopyNotPosToRoot
	  LoopTest
	end
  end
end</strategy-code>
        <strategy-comment/>
    </strategy>
    <main-strategy>K45OptimalStrategy</main-strategy>
    <testing-formula>
        <formula-name/>
        <formula-code>and Root not nec nec P</formula-code>
        <formula-comment/>
    </testing-formula>
    <testing-formula>
        <formula-name/>
        <formula-code>and Root and and nec pos nec or P Q nec pos not P pos nec not Q</formula-code>
        <formula-comment/>
    </testing-formula>
</logic>
